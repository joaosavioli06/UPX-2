/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package View;

import Controller.DispositivoController;
import Model.Dispositivo;
import Model.Dispositivo.Voltagem;
import Model.Dispositivo.Estado;
import connection.ConnectionUtils;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.sql.Statement;
import javax.swing.*;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
/**
 *
 * @author savio
 */
public class MenuPrincipal extends javax.swing.JFrame {

    
    /**
     * Creates new form MenuPrincipal
     */
    public MenuPrincipal() {
        initComponents();
        carregarDados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PainelCadastro = new javax.swing.JPanel();
        TextTipo = new javax.swing.JTextField();
        TextDispositivo = new javax.swing.JTextField();
        TextWatts = new javax.swing.JTextField();
        TextHoras = new javax.swing.JTextField();
        TextLocal = new javax.swing.JTextField();
        LabelDispositivo = new javax.swing.JLabel();
        LabelTipo = new javax.swing.JLabel();
        LabelWatts = new javax.swing.JLabel();
        LabelVolts = new javax.swing.JLabel();
        LabelData = new javax.swing.JLabel();
        LabelHoras = new javax.swing.JLabel();
        LabelLocal = new javax.swing.JLabel();
        LabelEstado = new javax.swing.JLabel();
        LabelObservações = new javax.swing.JLabel();
        BoxVolts = new javax.swing.JComboBox<>();
        SpinnerData = new javax.swing.JSpinner();
        BoxEstado = new javax.swing.JComboBox<>();
        ScrollTable = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        SubmitiBtn = new javax.swing.JButton();
        ScrollObs = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        BtnLimpar = new javax.swing.JButton();
        LabelIcon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PainelCadastro.setBackground(new java.awt.Color(204, 204, 204));

        TextWatts.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextWattsFocusLost(evt);
            }
        });
        TextWatts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextWattsActionPerformed(evt);
            }
        });

        TextHoras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextHorasActionPerformed(evt);
            }
        });

        TextLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextLocalActionPerformed(evt);
            }
        });

        LabelDispositivo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelDispositivo.setText("Nome do dispositivo");

        LabelTipo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelTipo.setText("Tipo de dispositivo");

        LabelWatts.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelWatts.setText("Potência (Watts)");

        LabelVolts.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelVolts.setText("Voltagem");

        LabelData.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelData.setText("Data de Aquisição");

        LabelHoras.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelHoras.setText("Horas de Uso Diárias/Estimadas");

        LabelLocal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelLocal.setText("Localização do Dispositivo (Cômodo)");

        LabelEstado.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelEstado.setText("Estado do Dispositivo");

        LabelObservações.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LabelObservações.setText("Observações");

        BoxVolts.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "110V", "220V", "Bivolt" }));
        BoxVolts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoxVoltsActionPerformed(evt);
            }
        });

        SpinnerData.setModel(new javax.swing.SpinnerDateModel());
        SpinnerData.setEditor(new javax.swing.JSpinner.DateEditor(SpinnerData, "dd/MM/yyyy"));

        BoxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ativo", "Inativo" }));

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Tipo", "Potência (Watts)", "Voltagem", "Data", "Horas", "Localização", "Estado", "Observações"
            }
        ));
        ScrollTable.setViewportView(Table);

        SubmitiBtn.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        SubmitiBtn.setText("Enviar");
        SubmitiBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 255, 255), null, null));
        SubmitiBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitiBtnActionPerformed(evt);
            }
        });

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        ScrollObs.setViewportView(jTextArea);

        BtnLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/icone_limpar.png"))); // NOI18N
        BtnLimpar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PainelCadastroLayout = new javax.swing.GroupLayout(PainelCadastro);
        PainelCadastro.setLayout(PainelCadastroLayout);
        PainelCadastroLayout.setHorizontalGroup(
            PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelCadastroLayout.createSequentialGroup()
                .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelCadastroLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(LabelVolts, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelData, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelWatts, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelDispositivo, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelCadastroLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TextDispositivo)
                                    .addComponent(TextTipo)
                                    .addComponent(TextWatts)
                                    .addComponent(SpinnerData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)))
                            .addGroup(PainelCadastroLayout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(BoxVolts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelCadastroLayout.createSequentialGroup()
                                .addGap(345, 345, 345)
                                .addComponent(TextLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PainelCadastroLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PainelCadastroLayout.createSequentialGroup()
                                        .addComponent(LabelEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(109, 109, 109)
                                        .addComponent(BoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(LabelLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LabelObservações, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ScrollObs, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PainelCadastroLayout.createSequentialGroup()
                                        .addComponent(LabelHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(TextHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(LabelIcon))))))
                    .addGroup(PainelCadastroLayout.createSequentialGroup()
                        .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelCadastroLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(ScrollTable, javax.swing.GroupLayout.PREFERRED_SIZE, 1236, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PainelCadastroLayout.createSequentialGroup()
                                .addGap(531, 531, 531)
                                .addComponent(SubmitiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70)
                                .addComponent(BtnLimpar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        PainelCadastroLayout.setVerticalGroup(
            PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelCadastroLayout.createSequentialGroup()
                .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelCadastroLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelDispositivo)
                            .addComponent(TextTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelHoras)
                            .addComponent(TextHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PainelCadastroLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(LabelIcon)))
                .addGap(12, 12, 12)
                .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelLocal)
                    .addComponent(TextLocal, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelTipo)
                    .addComponent(TextDispositivo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelCadastroLayout.createSequentialGroup()
                        .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(LabelWatts)
                                .addComponent(TextWatts, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(LabelEstado))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelCadastroLayout.createSequentialGroup()
                        .addComponent(BoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelObservações)
                    .addComponent(LabelVolts)
                    .addComponent(BoxVolts, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PainelCadastroLayout.createSequentialGroup()
                        .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ScrollObs, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PainelCadastroLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(PainelCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(LabelData)
                                    .addComponent(SpinnerData, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(SubmitiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BtnLimpar))
                .addGap(14, 14, 14)
                .addComponent(ScrollTable, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        getContentPane().add(PainelCadastro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1270, 690));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextWattsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextWattsFocusLost
        // Obtém o valor do campo de texto e remove espaços em branco
        String valor = TextWatts.getText().trim();

        // Verifica se o valor não está vazio e se já não contém o "W"
        if (!valor.isEmpty() && !valor.endsWith("W")) {
            TextWatts.setText(valor + "W");
        }
    }//GEN-LAST:event_TextWattsFocusLost

    private void TextWattsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextWattsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextWattsActionPerformed

    private void TextHorasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextHorasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextHorasActionPerformed

    private void TextLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextLocalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextLocalActionPerformed

    private void BoxVoltsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxVoltsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BoxVoltsActionPerformed

    private void SubmitiBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitiBtnActionPerformed
        
       try {
        // Verificação dos campos de texto
        if (TextTipo.getText().isEmpty()) throw new IllegalArgumentException("O nome do dispositivo não pode estar vazio.");
        if (TextDispositivo.getText().isEmpty()) throw new IllegalArgumentException("O tipo de dispositivo não pode estar vazio.");

        // Validação da potência
        int potencia;
        try {
            String potenciaTexto = TextWatts.getText().replaceAll("[^\\d]", ""); // Remove tudo que não é dígito
            potencia = Integer.parseInt(potenciaTexto);
        } catch (NumberFormatException e) {
            throw new NumberFormatException("A potência deve ser um número inteiro válido.");
        }

        // Validação da voltagem
        Voltagem voltagem;
        if (BoxVolts.getSelectedItem() == null) {
            throw new IllegalArgumentException("Por favor, selecione uma voltagem válida.");
        } else {
            String selectedVoltagem = BoxVolts.getSelectedItem().toString().toLowerCase(); // Converte para minúsculas
            switch (selectedVoltagem) {
                case "110v" -> voltagem = Voltagem.V110; // Mapeie para a constante correta
                case "220v" -> voltagem = Voltagem.V220; // Mapeie para a constante correta
                case "bivolt" -> voltagem = Voltagem.BIVOLT; // Mapeie para a constante correta
                default -> throw new IllegalArgumentException("Por favor, selecione uma voltagem válida.");
            }
        }

        // Validação da data
        LocalDate data;
        try {
            Date date = (Date) SpinnerData.getValue();
            data = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        } catch (ClassCastException e) {
            throw new ClassCastException("A data de aquisição é inválida.");
        }

        // Validação das horas de uso
        float horas;
        try {
            horas = Float.parseFloat(TextHoras.getText());
        } catch (NumberFormatException e) {
            throw new NumberFormatException("As horas de uso devem ser um número válido.");
        }

        // Validação da localização
        if (TextLocal.getText().isEmpty()) throw new IllegalArgumentException("A localização do dispositivo não pode estar vazia.");

        // Validação do estado
        Estado estado;

        String selectedEstado = BoxEstado.getSelectedItem().toString().toLowerCase(); // Converte para minúsculas
        switch (selectedEstado) {
        case "ativo" -> estado = Estado.ATIVO; // Ajuste para seu enum se necessário
        case "inativo" -> estado = Estado.INATIVO; // Ajuste para seu enum se necessário
        default -> throw new IllegalArgumentException("Por favor, selecione o estado do dispositivo.");
        }

        // Coleta das observações
        String obs = ((JTextArea) ScrollObs.getViewport().getView()).getText();
        if (obs.length() > 200) throw new IllegalArgumentException("As observações são muito longas.");

        // Criação do objeto Dispositivo e envio para o banco
        Dispositivo dispositivo = new Dispositivo(TextTipo.getText(), TextDispositivo.getText(), potencia, voltagem, data, horas, TextLocal.getText(), estado, obs);
        DispositivoController dispositivoController = new DispositivoController(ConnectionUtils.getConnection());
        dispositivoController.adicionarDispositivo(dispositivo);

        // Mensagem de sucesso
        JOptionPane.showMessageDialog(this, "Dispositivo enviado com sucesso!");
        
         // Atualiza a tabela com os novos dados
           carregarDados();

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Erro: valor numérico inválido.");
    } catch (IllegalArgumentException | ClassCastException e) {
        JOptionPane.showMessageDialog(this, "Erro: valor inválido em um dos campos. " + e.getMessage());
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao conectar ao banco de dados: " + e.getMessage());
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro inesperado: " + e.getMessage());
        e.printStackTrace();
    }
       
    }//GEN-LAST:event_SubmitiBtnActionPerformed

    private void BtnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLimparActionPerformed
    TextTipo.setText(""); // Limpa o campo de texto do tipo
    TextDispositivo.setText(""); // Limpa o campo de texto do dispositivo
    TextWatts.setText(""); // Limpa o campo de potência
    BoxVolts.setSelectedIndex(0); // Reseta o ComboBox para a primeira opção (110V)
    SpinnerData.setValue(new Date()); // Reseta o JSpinner para a data atual
    TextHoras.setText(""); // Limpa o campo de horas
    TextLocal.setText(""); // Limpa o campo de localização
    BoxEstado.setSelectedIndex(0); // Reseta o ComboBox para a primeira opção (Ativo)
    ScrollObs.setViewportView(new JTextArea()); // Limpa a área de observações
    }//GEN-LAST:event_BtnLimparActionPerformed
    
    // Método auxiliar que retorna uma lista de dispositivos do banco de dados
   private void carregarDados() {
    DefaultTableModel modelo = (DefaultTableModel) Table.getModel();
    modelo.setRowCount(0); // Limpa a tabela antes de adicionar novos dados

    Connection connection = null;
    Statement statement = null;
    ResultSet resultSet = null;
    
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    
    try {
        connection = ConnectionUtils.getConnection();
        statement = connection.createStatement();
        resultSet = statement.executeQuery("SELECT * FROM dispositivos");

        while (resultSet.next()) {
            int id = resultSet.getInt("id");
            String nome = resultSet.getString("nome");
            String tipo = resultSet.getString("tipo");
            int potencia = resultSet.getInt("potencia");
            String voltagem = resultSet.getString("voltagem");
            Date data = resultSet.getDate("data_aquisicao");
            float horas = resultSet.getFloat("horas_uso_diarias");
            String localizacao = resultSet.getString("localizacao");
            String estado = resultSet.getString("estado");
            String observacoes = resultSet.getString("obs");
            
            String dataFormatada = sdf.format(data);
            
            modelo.addRow(new Object[]{id, nome, tipo, potencia, voltagem, dataFormatada, horas, localizacao, estado, observacoes});
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar dados: " + e.getMessage());
    } finally {
        // Fechando recursos para liberar a conexão
        ConnectionUtils.closeConnection(connection);
        try {
            if (statement != null) statement.close();
            if (resultSet != null) resultSet.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

    /**
     * @param args the command line arguments
     */
    public  void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> BoxEstado;
    private javax.swing.JComboBox<String> BoxVolts;
    private javax.swing.JButton BtnLimpar;
    private javax.swing.JLabel LabelData;
    private javax.swing.JLabel LabelDispositivo;
    private javax.swing.JLabel LabelEstado;
    private javax.swing.JLabel LabelHoras;
    private javax.swing.JLabel LabelIcon;
    private javax.swing.JLabel LabelLocal;
    private javax.swing.JLabel LabelObservações;
    private javax.swing.JLabel LabelTipo;
    private javax.swing.JLabel LabelVolts;
    private javax.swing.JLabel LabelWatts;
    private javax.swing.JPanel PainelCadastro;
    private javax.swing.JScrollPane ScrollObs;
    private javax.swing.JScrollPane ScrollTable;
    private javax.swing.JSpinner SpinnerData;
    private javax.swing.JButton SubmitiBtn;
    private javax.swing.JTable Table;
    private javax.swing.JTextField TextDispositivo;
    private javax.swing.JTextField TextHoras;
    private javax.swing.JTextField TextLocal;
    private javax.swing.JTextField TextTipo;
    private javax.swing.JTextField TextWatts;
    private javax.swing.JTextArea jTextArea;
    // End of variables declaration//GEN-END:variables
}